// 簡易Chartレンダラ（CSP対応・外部依存なし）
// 対応タイプ: 'bar', 'doughnut'（最低限の描画）
(function(){
  function ensureSize(ctx){
    var c = ctx && ctx.canvas; if(!c) return;
    // CSSサイズに合わせて内部ピクセルサイズを調整
    var w = c.clientWidth || c.width || 300;
    var h = c.clientHeight || c.height || 150;
    if (c.width !== w) c.width = w;
    if (c.height !== h) c.height = h;
  }
  function SimpleChart(ctx, config){
    this.ctx = ctx && ctx.canvas ? ctx : (ctx && ctx.getContext ? ctx.getContext('2d') : ctx);
    this.config = config || {};
    if (!this.ctx) return;
    ensureSize(this.ctx);
    this.draw();
  }
  SimpleChart.prototype.clear = function(){
    var c = this.ctx.canvas;
    this.ctx.clearRect(0, 0, c.width, c.height);
  };
  SimpleChart.prototype.draw = function(){
    var type = this.config.type;
    if (type === 'bar') return this.drawBar();
    if (type === 'doughnut' || type === 'pie') return this.drawDoughnut();
  };
  SimpleChart.prototype.drawBar = function(){
    var ctx = this.ctx, c = ctx.canvas;
    var ds = (this.config.data && this.config.data.datasets && this.config.data.datasets[0]) || { data: [] };
    var data = ds.data || [];
    this.clear();
    var pad = 30;
    var w = Math.max(1, (c.width - pad*2));
    var h = Math.max(1, (c.height - pad*2));
    var max = 1;
    for (var i=0;i<data.length;i++) { var v = Number(data[i])||0; if (v>max) max=v; }
    var barW = w / Math.max(1, data.length);
    ctx.save();
    ctx.translate(pad, pad);
    ctx.fillStyle = ds.backgroundColor || 'rgba(79,70,229,0.8)';
    for (var j=0;j<data.length;j++){
      var val = Math.max(0, Number(data[j])||0);
      var bh = (val / max) * h;
      var x = j*barW + barW*0.1;
      var y = h - bh;
      var bw = barW*0.8;
      ctx.fillRect(x, y, bw, bh);
    }
    ctx.restore();
  };
  SimpleChart.prototype.drawDoughnut = function(){
    var ctx = this.ctx, c = ctx.canvas;
    var ds = (this.config.data && this.config.data.datasets && this.config.data.datasets[0]) || { data: [] };
    var data = ds.data || [];
    this.clear();
    var total = 0; for (var i=0;i<data.length;i++){ total += Math.max(0, Number(data[i])||0); }
    if (!total) total = 1;
    var colors = ds.backgroundColor || [];
    var cx = c.width/2, cy = c.height/2;
    var r = Math.min(c.width, c.height)/2 * 0.85;
    var inner = r * 0.6;
    var start = -Math.PI/2;
    for (var j=0;j<data.length;j++){
      var val = Math.max(0, Number(data[j])||0);
      var ang = (val/total)*Math.PI*2;
      ctx.beginPath();
      ctx.moveTo(cx, cy);
      ctx.fillStyle = colors[j % colors.length] || 'hsl(' + (j*40%360) + ' 70% 55%)';
      ctx.arc(cx, cy, r, start, start+ang);
      ctx.lineTo(cx, cy);
      ctx.fill();
      start += ang;
    }
    // 中抜き
    ctx.globalCompositeOperation = 'destination-out';
    ctx.beginPath();
    ctx.arc(cx, cy, inner, 0, Math.PI*2);
    ctx.fill();
    ctx.globalCompositeOperation = 'source-over';
  };
  SimpleChart.prototype.destroy = function(){ try{ this.clear(); }catch(e){} };
  if (typeof window !== 'undefined') window.Chart = SimpleChart;
})();